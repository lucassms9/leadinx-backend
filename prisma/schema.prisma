// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id          String   @id @default(uuid())
  name        String
  cnpj        String   @unique
  email       String
  phone       String
  address     String
  city        String
  state       String
  zipCode     String
  logo        String?
  isActive    Boolean  @default(true)
  users       User[]
  leads       Lead[]
  products     Product[]
  subProducts SubProduct[]
  statuses    Status[]
  stages      Stage[]
  temperatures Temperature[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model User {
  id            String   @id @default(uuid())
  name          String
  email         String   @unique
  password      String
  isActive      Boolean  @default(true)
  tenantId      String
  tenant        Tenant   @relation(fields: [tenantId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  leadsConsulted Lead[]   // Relação inversa para os leads consultados por este usuário
}

model Lead {
  id            String     @id @default(uuid())
  name          String
  email         String
  phone         String
  company       String
  status        String
  stage         String
  temperature   String
  source        String
  sourceSite    String?
  sourceSocial  String?
  sourceVisit   String?
  product       String
  subProduct    String
  value         String
  notes         String?
  reminder      DateTime?
  reminderName  String?
  consultantId  String?
  consultant    User?     @relation(fields: [consultantId], references: [id])
  messages      Message[]
  reminders     Reminder[]
  tenantId      String
  tenant        Tenant     @relation(fields: [tenantId], references: [id])
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model Message {
  id        String   @id @default(uuid())
  date      DateTime @default(now())
  type      String
  content   String
  sender    String
  leadId    String
  lead      Lead     @relation(fields: [leadId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Reminder {
  id        String   @id @default(uuid())
  name      String
  date      DateTime
  completed Boolean  @default(false)
  leadId    String
  lead      Lead     @relation(fields: [leadId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id          String       @id @default(uuid())
  name        String
  description String
  tenantId    String
  tenant      Tenant       @relation(fields: [tenantId], references: [id])
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model SubProduct {
  id          String     @id @default(uuid())
  name        String
  description String
  tenantId    String
  tenant      Tenant     @relation(fields: [tenantId], references: [id])
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Status {
  id          String   @id @default(uuid())
  name        String
  description String
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Stage {
  id          String   @id @default(uuid())
  name        String
  description String
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Temperature {
  id          String   @id @default(uuid())
  name        String
  description String
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
